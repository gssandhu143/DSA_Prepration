Given an array of integers nums and an integer limit, return the size of the longest non-empty subarray such that the absolute difference between 
any two elements of this subarray is less than or equal to limit.


Example 1:

Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.
[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.
[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.
[2] with maximum absolute diff |2-2| = 0 <= 4.
[2,4] with maximum absolute diff |2-4| = 2 <= 4.
[2,4,7] with maximum absolute diff |2-7| = 5 > 4.
[4] with maximum absolute diff |4-4| = 0 <= 4.
[4,7] with maximum absolute diff |4-7| = 3 <= 4.
[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.


Solution 1:

    public int longestSubarray(int[] nums, int limit) {
        
        int ans = 0;
        for(int i=0;i<nums.length;i++){
            int min = nums[i], max = nums[i];
            for(int j=i;j<nums.length;j++){
                min = Math.min(nums[j], min);
                max = Math.max(nums[j], max);
                
                int abs = Math.abs(max-min);
                if(abs>limit)break;
                
                if(abs<=limit){
                    ans = Math.max(j-i+1, ans);
                }
            }
        }
        return ans;
    }
Time O(N^2)
Space O(1)
    
*-----------------**-----------------**-----------------**-----------------**-----------------**-----------------**-----------------**-----------------*
Solution 2:
Use one tree map can easily get the maximum and the minimum at the same time.
In java, we can use TreeMap to count elements.

    public int longestSubarray(int[] nums, int limit) {
        int i=0, j=0;
        
        TreeMap<Integer, Integer> mp = new TreeMap<>();
        
        for(j=0;j<nums.length;j++){
            mp.put(nums[j], mp.getOrDefault(nums[j], 0)+1);
            
            if(mp.lastEntry().getKey()-mp.firstEntry().getKey() > limit){
                mp.put(nums[i], mp.get(nums[i])-1);
                if(mp.get(nums[i])==0){
                    mp.remove(nums[i]);
                }
                i++;
            }
        }
        return j-i;
    }
    
Time O(NogN)
Space O(N)
