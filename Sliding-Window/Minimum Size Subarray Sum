
Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray 
[numsl, numsl+1, ..., numsr-1, numsr] of which the sum is greater than or equal to target. If there is no such subarray, return 0 instead.

Example 1:

Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.


Solution 1 :

   public int minSubArrayLen(int target, int[] nums){
       
       int ans = Integer.MAX_VALUE;
        int sum = 0;
       int sums[] = new int[nums.length];
       sums[0] = nums[0];
       //Prefix-Sum
       for(int i=1;i<nums.length;i++){
           sums[i] = sums[i-1]+nums[i];
       }
       
       for(int i=0;i<nums.length;i++){
           for(int j=i;j<nums.length;j++){
               sum = sums[j]-sums[i]+nums[i];
               if(sum >= target){
                   ans = Math.min(ans, j-i+1);
                   break; //Found the smallest subarray with sum>=s starting with index i, hence move to next index
               }
           }
       }
       
       return (ans==Integer.MAX_VALUE)?0:ans;
   }
   
Complexity analysis :

Time complexity: O(n^2)
Space complexity: O(n) extra space.
 
----------*----------*----------*----------*----------*----------*----------*----------*----------*----------*----------*----------*----------*
   
Solution 2 : 
Until now, we have kept the starting index of subarray fixed, and found the last position. Instead, we could move the starting index of 
the current subarray as soon as we know that no better could be done with this index as the starting index. We could keep 2 pointer,one 
for the start and another for the end of the current subarray, and make optimal moves so as to keep the \text{sum}sum greater than ss as 
well as maintain the lowest size possible.

    public int minSubArrayLen(int target, int[] nums) {
        
        int ans = Integer.MAX_VALUE;
        int sum = 0, start = 0;
        for(int end=0;end<nums.length;end++){
            sum += nums[end];
            while(sum>=target){
                ans = Math.min(ans, end-start+1);
                sum -= nums[start++];
            }
        }
        
        return (ans==Integer.MAX_VALUE)?0:ans;
    }
    
Time complexity: O(n)
Space complexity: O(1)
